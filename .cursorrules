
   You are an expert in Flutter, Dart, Bloc, Hive Adapters, Markdown Latex.

   ## Project Context
   - A Flutter-based mobile app for students to prepare for National exams by practicing MCQs with explanations. Questions are stored locally in Hive and grouped by year or subject. The app supports LaTeX markdown for formatted question and option display, prioritizing modern and simple UI/UX.

    Key Principles
    - Write concise, technical Dart code with accurate examples.
    - Use functional and declarative programming patterns where appropriate.
    - Prefer composition over inheritance.
    - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
    - Structure files: Use clean architecture file structure, put shared features and configurations in lib/core and each feature in lib/fetures/{feature_name}.
    - Always follow clean architecture for every feature and don't forget sepration of concern as much as possible.
    - Before you write any code, I need you to come up with a clear implementation plan and walk me through it. Then wait for my confirmation. 
    
    Dart/Flutter
    - Use const constructors for immutable widgets.
    - Leverage Equatable.
    - Use arrow syntax for simple functions and methods.
    - Prefer expression bodies for one-line getters and setters.
    - Use trailing commas for better formatting and diffs.
    
    Error Handling and Validation
    - Implement error handling in views using SelectableText.rich instead of SnackBars.
    - Display errors in SelectableText.rich with red color for visibility.
    - Handle empty states within the displaying screen.
    - Manage error handling and loading states within Cubit states.
    
    Bloc-Specific Guidelines
    - Use Cubit for managing simple state and Bloc for complex event-driven state management.
    - Create the state and the event in different files and connect them with part and part of.
    - Use descriptive and meaningful event names for Bloc.
    - Don't use freezed to generate the states and events use equatable if necessary.
    - Prefer context.read() for accessing Cubit/Bloc states in widgets.
     
    Performance Optimization
    - Use const widgets where possible to optimize rebuilds.
    - Implement list view optimizations (e.g., ListView.builder).
    - Use AssetImage for static images and cached_network_image for remote images.
    - Provide blocs in the appropriate place in the widget tree and make sure they are distroyed when not used.
    - Use GetIt package to register dependecies.
    
    Key Conventions
    1. Use auto_route for navigation and deep linking.
    2. Optimize for Flutter performance metrics (first meaningful paint, time to interactive).
    
    3. Prefer stateless widgets:
       - Use BlocBuilder for widgets that depend on Cubit/Bloc state.
       - Use BlocListener for handling side effects, such as navigation or showing dialogs.
    
    UI and Styling
    - Use Flutter's built-in widgets and create custom widgets.
    - Implement responsive design using ResponsiveBuilder.
    - Define the styles and colors elevated button, textfield, textstyles and colors in the Theme data, and make sure to be creative and make them look nice by giving some rounded border with radius, 
    - Use themes for consistent styling across the app.
    - Use Theme.of(context).textTheme.titleLarge instead of headline6, and headlineSmall etc.
    
    Model and Database Conventions
    - Create a toJson and fromJson field for models that need communication with the database in the data layer
    - Design a Hive adapters in the data layer.

    Widgets and UI Components
    - Prefer small, private widget classes instead of methods like Widget _build....
    - Implement RefreshIndicator for pull-to-refresh functionality.
    - In TextFields, set appropriate textCapitalization, keyboardType, and textInputAction.
    - Always include an errorBuilder when using Image.network.
    
    Miscellaneous
    - Use log instead of print for debugging.
    - Use BlocObserver for monitoring state transitions during debugging.
    - Keep lines no longer than 80 characters, adding commas before closing brackets for multi-parameter functions.
    - Use @JsonValue(int) for enums that go to the database.
    
    Code Generation
    - Utilize build_runner for generating code from annotations (Freezed, JSON serialization).
    - Run flutter pub run build_runner build --delete-conflicting-outputs after modifying annotated classes.
    
    Documentation
    - Document complex logic and non-obvious code decisions.
    - Follow official Flutter, Bloc, Hive and for best practices.
    
    Refer to Flutter, Bloc, markdown_widget, flutter_math_fork and Hive documentation for Widgets, State Management, and Backend Integration best practices.
    